Main.eg : Term SizedInvMonoidSyn [<("x", 1), ("y" :! 2)] 3
eg = Operation (MkOp Here) [<S (plus 0 0), 2] [<Operation (MkOp Here) [<1, 0] [<Var (There Here), Operation (let MkOp idx = let MkOp idx = MkOp Here in MkOp (There idx) in MkOp (There idx)) [<] [<]], Operation (let MkOp idx = MkOp Here in MkOp (There idx)) [<2] [<Var Here]]
Main.eg' : Term SizedInvMonoidSyn [<("x", 1), ("y" :! 2)] 3
eg' = replace Refl (Operation (MkOp Here) [<(MkOp Here) .result [<1, (let MkOp idx = let MkOp idx = MkOp Here in MkOp (There idx) in MkOp (There idx)) .result [<]], (let MkOp idx = MkOp Here in MkOp (There idx)) .result [<2]] [<Operation (MkOp Here) [<1, (let MkOp idx = let MkOp idx = MkOp Here in MkOp (There idx) in MkOp (There idx)) .result [<]] [<Var (There Here), Operation (MkOp (There (There Here))) [<] [<]], Operation (MkOp (There Here)) [<2] [<Var Here]])
Main.eg2 : Term SizedInvMonoidSyn [<("x", 1), ("y", 2), ("z" :! 3)] 8
eg2 = replace Refl (Operation (MkOp Here) [<(MkOp Here) .result [<2, (MkOp Here) .result [<1, 3]], 2] [<Operation (MkOp Here) [<2, (MkOp Here) .result [<1, 3]] [<Var (There Here), Operation (MkOp Here) [<1, 3] [<Var (There (There Here)), Var Here]], Var (There Here)])

[<Var (There Here), Var Here]

Val 3
Val 8

[1, 3, 2]
[2, 3, 1, 4, 5, 6, 2, 3]

"((x * e) * (inv y))"
"((y * (x * z)) * y)"

"((b * (a * (a * b))) * b)"

